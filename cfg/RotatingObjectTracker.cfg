#!/usr/bin/env python

# For Groovy and above, the following line should be
# from dynamic_reconfigure.parameter_generator_catkin import *
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#    _recognized_objects_topic = "/recognized_object_array"
#    _base_tf_frame = ""
#    _intermediate_tf_frame = "/rotation_center"
#    _rotating_tf_frame = "/rotating_objects"
#    _object_detection_client = actionlib.SimpleActionClient
#    _tf_publisher = tf.TransformBroadcaster
#    _tf_listener = tf.TransformListener
#    _marker_publisher = rospy.Publisher
#    _rotation_publisher = rospy.Publisher
#    _model_lock = threading.Lock
#    _reference_frame = np.array
#    _rotation_center = np.array
#    _rotation_axis = np.array
#    _rotation_speed = 0
#    _previous_angle = 0
#    _last_tf_broadcast = 0.0   
#    _tracked_objects = []
#    _estimate_rotation_service = EstimateRotation
#    _min_poses_to_consider_an_object = 0
#    _max_poses_for_object = 0
#    _max_stale_time_for_object = 0.0
#    _same_object_threshold = 0.0

gen.add("fixed_frame", str_t, 0, "The fixed TF frame to use for the rotation estimation.", "/base_link")
gen.add("rotation_center_frame", str_t, 0, "The TF frame used to publish the center of rotation.", "/rotation_center")
gen.add("rotating_frame", str_t, 0, "The TF frame used to publish the rotating objects", "/rotating_objects")
gen.add("min_poses_for_tracking", int_t, 0, "The minimum number of poses that need to be seen before start tracking an object.", 5)
gen.add("max_poses_for_object", int_t, 0, "The max number of poses to keep for an object. This number influences the speed at which the model is adapted.", 50)
gen.add("max_stale_time", double_t, 0, "The max time the node keeps track of an unseen object.", 10.0, 0.0, 60.0)
gen.add("same_object_threshold", double_t, 0, "The maximum distance between two poses to consider them a single object.", 0.1, 0.01, 1.00)
gen.add("use_roi", bool_t, 0, "Search for objects only inside a specific area (With fixed_frame coordinates).", False)
gen.add("x_min", double_t, 0, "The minimum X coordinate for the detection ROI", -100.0, -100.0, 100.0)
gen.add("x_max", double_t, 0, "The maximum X coordinate for the detection ROI", 100.0, -100.0, 100.0)
gen.add("y_min", double_t, 0, "The minimum Y coordinate for the detection ROI", -100.0, -100.0, 100.0)
gen.add("y_max", double_t, 0, "The maximum Y coordinate for the detection ROI", 100.0, -100.0, 100.0)
gen.add("z_min", double_t, 0, "The minimum Z coordinate for the detection ROI", -100.0, -100.0, 100.0)
gen.add("z_max", double_t, 0, "The maximum Z coordinate for the detection ROI", 100.0, -100.0, 100.0)
gen.add("detection_rate", double_t, 0, "The rate in Hz at which to invoke the object detection service.", 2.0, 0.1, 10.0)
gen.add("tf_rate", double_t, 0, "The rate in Hz at which to publish the TF data.", 20.0, 0.1, 1000.0)

exit(gen.generate("object_tracker", "rotating_object_tracker", "RotatingObjectTracker"))